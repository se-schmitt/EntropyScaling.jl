var documenterSearchIndex = {"docs":
[{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"S. Schmitt, H. Hasse and S. Stephan. Entropy scaling framework for transport properties using molecular-based equations of state. Journal of Molecular Liquids 395, 123811 (2024).\n\n\n\nS. Schmitt, H. Hasse and S. Stephan. Entropy scaling for diffusion coefficients in fluid mixtures. Nature Communications 16, 2611 (2025).\n\n\n\nX. Yang, X. Xiao, M. Thol, M. Richter and I. H. Bell. Linking Viscosity to Equations of State Using Residual Entropy Scaling Theory. International Journal of Thermophysics 43, 183 (2022).\n\n\n\nX. Yang, D. Kim, E. F. May and I. H. Bell. Entropy scaling of thermal conductivity: Application to refrigerants and their mixtures. Industrial & Engineering Chemistry Research 60, 13052–13070 (2021).\n\n\n\nV. Martinek, I. Bell, R. Herzog, M. Richter and X. Yang. Entropy Scaling of Viscosity IV─Application to 124 Industrially Important Fluids. Journal of Chemical & Engineering Data 70, 727–742 (2025).\n\n\n\nB. E. Poling, J. M. Prausnitz and J. P. O'Connell. The properties of gases and liquids. 5th Edition (McGraw-Hill, 2001).\n\n\n\nC. R. Wilke. A viscosity equation for gas mixtures. The Journal of Chemical Physics 18, 517–519 (1950).\n\n\n\nE. A. Mason and S. C. Saxena. Approximate formula for the thermal conductivity of gas mixtures. The Physics of Fluids 1, 361–369 (1958).\n\n\n\nL. Miller and P. C. Carman. Self-diffusion in mixtures. Part 4. – Comparison of theory and experiment for certain gas mixtures. Transactions of the Faraday Society 57, 2143–2150 (1961).\n\n\n\nS. U. Kim and C. W. Monroe. High-accuracy calculations of sixteen collision integrals for Lennard-Jones (12-6) gases and their interpolation to parameterize neon, argon, and krypton. Journal of Computational Physics 273, 358–373 (2014).\n\n\n\nP. D. Neufeld, A. R. Janzen and R. A. Aziz. Empirical Equations to Calculate 16 of the Transport Collision Integrals Ω⁽ˡˢ⁾ for the Lennard‐Jones (12–6) Potential. The Journal of Chemical Physics 57, 1100–1102 (1972).\n\n\n\n","category":"page"},{"location":"models/CE_models/#Chapman-Enskog-Model","page":"Chapman-Enskog Model","title":"Chapman-Enskog Model","text":"","category":"section"},{"location":"models/CE_models/","page":"Chapman-Enskog Model","title":"Chapman-Enskog Model","text":"Chapman-Enskog model for transport properties at the zero-density limit based on the kinetic gas theory.","category":"page"},{"location":"models/CE_models/","page":"Chapman-Enskog Model","title":"Chapman-Enskog Model","text":"beginaligned\neta_varrho rightarrow 0              = frac516 sqrtfracM k_rm B Tpi N_rm A frac1sigma^2 Omega^(22) \nlambda_varrho rightarrow 0\t          = frac7564 k_rm B sqrtfracR TM pi frac1sigma^2 Omega^(22)\nD_varrho rightarrow 0 varrho^rm m = frac38 sqrtfracM k_rm B Tpi N_rm A frac1sigma^2 Omega^(11)\nendaligned","category":"page"},{"location":"models/CE_models/#EntropyScaling.ChapmanEnskogModel","page":"Chapman-Enskog Model","title":"EntropyScaling.ChapmanEnskogModel","text":"ChapmanEnskogModel <: AbstractTransportPropertyModel\n\nChapman-Enskog transport properties for the zero-density limit.\n\nFields\n\nσ::Vector{T}: Lennard-Jones size parameter ([σ] = m)\nε::Vector{T}: Lennard-Jones energy parameter ([ε] = J)\nMw::Vector{T}: molar mass ([Mw] = kg mol⁻¹)\ncollision::C: collision integral method (KimMonroe() (default) or Neufeld(), see Ω)\n\nConstructors\n\nChapmanEnskogModel(components; collision_integral=KimMonroe(), ref=\"\", ref_id=\"\"): database constructor\nChapmanEnskogModel(components, σ, ε, Mw; collision_integral=KimMonroe()): custom parameters constructor\n\nInput arguments can either be single values (pure) or vectors. The keywords ref (short reference) and ref_id (DOI or ISBN) enable the specification of the reference. Currently, parameters from Poling et al. [6] and Yang et al. [3] are in the database. Mixture properties are calculated according to the models from Wilke [7] (viscosity), Mason and Saxena [8] (thermal conductivity), and Miller and Carman [9] (self-diffusion).\n\nExample\n\nusing EntropyScaling \n\n# Construction with custom parameters\nσ, ε, Mw = 3.758e-10, 148.6*EntropyScaling.kB, 16.043e-3            # from Poling et al.\nmodel_methane = ChapmanEnskogModel(\"methane\",σ,ε,Mw)\n\nη_mix = viscosity(model_methane, NaN, 300.)\nD_mix = self_diffusion_coefficient(model_methane, NaN, 300.)\n\n# Construction from database\nmodel_mix = ChapmanEnskogModel([\"butane\",\"methanol\"]; ref=\"Poling et al. (2001)\")\n\nη_mix = viscosity(model_mix, NaN, 300., [.5,.5])\nD_mix = self_diffusion_coefficient(model_mix, NaN, 300., [.5,.5])\n\n\n\n\n\n","category":"type"},{"location":"models/CE_models/#EntropyScaling.Ω","page":"Chapman-Enskog Model","title":"EntropyScaling.Ω","text":"Ω(poperty::AbstractTransportProperty, model::AbstractChapmanEnskogModel, T)\n\nCalculates the collision integral for a given model and property (Ω₁₁ for diffusion coefficients and Ω₂₂ for viscosity/thermal conductivity) at the specified temperature T.\n\nTwo methods are implemented:\n\nKimMonroe() [10]\nNeufeld() [11]\n\n\n\n\n\n","category":"function"},{"location":"models/ES_models/#Entropy-Scaling-Models","page":"Entropy Scaling Models","title":"Entropy Scaling Models","text":"","category":"section"},{"location":"models/ES_models/","page":"Entropy Scaling Models","title":"Entropy Scaling Models","text":"Entropy scaling makes use of the fact that transport properties can be scaled such that the scaled transport property Y^rm s is a univariate function of the configurational (or  residual) entropy s_rm conf, i.e. ","category":"page"},{"location":"models/ES_models/","page":"Entropy Scaling Models","title":"Entropy Scaling Models","text":"Y^rm s = Y^rm sleft(s_rm confright)","category":"page"},{"location":"models/ES_models/","page":"Entropy Scaling Models","title":"Entropy Scaling Models","text":"Entropy scaling enables the prediction of transport properties in all fluid phases.","category":"page"},{"location":"models/ES_models/","page":"Entropy Scaling Models","title":"Entropy Scaling Models","text":"The following entropy scaling models are currently implemented:","category":"page"},{"location":"models/ES_models/","page":"Entropy Scaling Models","title":"Entropy Scaling Models","text":"Entropy Scaling Framework [1, 2] (FrameworkModel)\nRefprop Residual Entropy Scaling (RES) Model [3] (RefpropRESModel)","category":"page"},{"location":"models/ES_models/","page":"Entropy Scaling Models","title":"Entropy Scaling Models","text":"All models are similarly structured with the following fields:","category":"page"},{"location":"models/ES_models/","page":"Entropy Scaling Models","title":"Entropy Scaling Models","text":"components::Vector{String}: names of the chemical components of the system\nparams::Vector{ModelParams}: vector of model-specific paramater objects\neos: EOS model","category":"page"},{"location":"models/ES_models/","page":"Entropy Scaling Models","title":"Entropy Scaling Models","text":"The ModelParams are model-specific types containing all required parameters of the model. They always contain the Chapman-Enskog model (CE_model) as well as base parameters (base) which itself contains general parameters like the transport property or the molar mass.","category":"page"},{"location":"models/ES_models/","page":"Entropy Scaling Models","title":"Entropy Scaling Models","text":"All models share the contructor method Model(eos, params::Dict{P}), where params is a dict  containing the parameters with the respective transport property as key, e.g.,  Dict(Viscosity() => [a_η, b_η, c_η], ThermalConductivity() => [a_λ, b_λ, c_λ]). Here, a, b, and c are the parameters (note that a_η, b_η, ... are vectors or matrices themselves). Lists of the parameters are given below in the repective 'Parameters' sections. Additional model-specific constructors are also given below.","category":"page"},{"location":"models/ES_models/#Framework-Model","page":"Entropy Scaling Models","title":"Framework Model","text":"","category":"section"},{"location":"models/ES_models/#EntropyScaling.FrameworkModel","page":"Entropy Scaling Models","title":"EntropyScaling.FrameworkModel","text":"FrameworkModel{T} <: AbstractEntropyScalingModel\n\nEntropy scaling framework [1, 2].\n\nThe entropy scaling framework provides a physical way to model transport properties  (viscosity, thermal conductivity, diffusion coeffficients) based on molecular-based EOS. It enables fitting new models using only few experimental data.\n\nParameters\n\nα::Matrix{T}: component-specific parameters (size: 5 x N_components)\n\nm (segment parameter of molecular-based EOS) and Y₀⁺min (minimum of the scaled  zero-density transport property) are additional internal parameters (not to be set at  construction).\n\nConstructors\n\nFrameworkModel(eos, params::Dict{P}): Default constructor (see above).\nFrameworkModel(eos, datasets::Vector{TransportPropertyData}; opts::FitOptions=FitOptions(), solute=nothing):   Constructor for fitting new parameters α to experimental data (only applicable to pure components).   datasets contains the experimental data, see TransportPropertyData.   opts enables controling the fitting procedure through FitOptions.   solute is an EOS model of the solute (optional, for fitting diff. coeff. at infinite dilution).\n\nExample\n\nusing EntropyScaling, Clapeyron\n\n# Load experimental sample data for n-butane\n(T_exp,ϱ_exp,η_exp) = EntropyScaling.load_sample_data()\ndata = ViscosityData(T_exp, [], ϱ_exp, η_exp, :unknown)\n\n# Create EOS model\neos_model = PCSAFT(\"butane\")\n\n# Create entropy scaling model (fit of parameters)\nmodel = FrameworkModel(eos_model, [data])\n\n# Calculation of the viscostiy at state\nη = viscosity(model, 0.1e6, 300.)\n\n\n\n\n\n","category":"type"},{"location":"models/ES_models/#Refprop-RES-Model","page":"Entropy Scaling Models","title":"Refprop RES Model","text":"","category":"section"},{"location":"models/ES_models/#EntropyScaling.RefpropRESModel","page":"Entropy Scaling Models","title":"EntropyScaling.RefpropRESModel","text":"RefpropRESModel{T} <: AbstractEntropyScalingModel\n\nEntropy scaling model based on Refprop EOS [3, 4]. \n\nA database provides ready-to-use models for the viscosity of several fluids. The model can favourably be used in combination with Clapeyron.jl and Coolprop.jl (see examples).\n\nParameters\n\nn::Matrix{T}: component-specific or global (group) parameters\nξ::Vector{T}: component-specific scaling parameter in case global parameters are used (ξ = 1 for individual fits)\nσ::Vector{T}: LJ size parameter for the Chapman-Enskog model \nε::Vector{T}: LJ energy parameter for the Chapman-Enskog model\ncrit::Dict{Symbol,Vector}: parameters for critical contribution of thermal conductivity (keys: :φ0, :Γ, :qD, and :Tref)\n\nConstructors\n\nRefpropRESModel(eos, params::Dict{P}; kw...): Default constructor (see above).\nRefpropRESModel(eos, components; kw...): Creates a ES model using the parameters provided in the database (recommended).    RefpropRESModel(components; kw...) creates the EOS model on-the-fly (only works if Clapeyron.jl and Coolprop.jl are loaded).\n\ninfo: Info\nThe default CoolProp EOS is used here which does not necessarily match the choice of the original papers.  This might lead to slight deviations to the values in the original papers (especially for the thermal conductivity).\n\nKeywords\n\nηref = \"Yang et al. (2022)\": viscosity model (\"Yang et al. (2022)\" [3] or \"Martinek et al. (2025)\" [5]).\n\nExample\n\nusing EntropyScaling, Clapeyron, CoolProp\n\nmodel_pure = RefpropRESModel(\"R134a\")\nη_pure = viscosity(model_pure, 1e5, 300.; phase=:liquid)\n\nmodel_mix = RefpropRESModel([\"decane\",\"butane\"])\nη_mix = viscosity(model_mix, 1e5, 300., [.5,.5])\n\n\n\n\n\n","category":"type"},{"location":"models/ES_models/#Fitting-Utilities","page":"Entropy Scaling Models","title":"Fitting Utilities","text":"","category":"section"},{"location":"models/ES_models/","page":"Entropy Scaling Models","title":"Entropy Scaling Models","text":"Some entropy scaling models allow the fitting of substance-specific parameters to experimental data. Therefore, a unified interface is provided including the handling of the data and the fit options.","category":"page"},{"location":"models/ES_models/","page":"Entropy Scaling Models","title":"Entropy Scaling Models","text":"Fitting Procedure","category":"page"},{"location":"models/ES_models/","page":"Entropy Scaling Models","title":"Entropy Scaling Models","text":"Loading experimental data and defining TransportPropertyData\nFitting (included in the model construction)\nPlotting results and saving the parameters","category":"page"},{"location":"models/ES_models/#EntropyScaling.TransportPropertyData","page":"Entropy Scaling Models","title":"EntropyScaling.TransportPropertyData","text":"TransportPropertyData(prop, T, p, ϱ, η, phase=:unknown)\nViscosityData(T, p, ϱ, η, phase=:unknown)\nThermalConductivityData(T, p, ϱ, λ, phase=:unknown)\nSelfDiffusionCoefficientData(T, p, ϱ, D, phase=:unknown)\nInfDiffusionCoefficientData(T, p, ϱ, D, phase=:unknown)\n\nConstructor for TransportPropertyData. Either pressure p or density ϱ have to be specified. phase can also be a Vector{Symbol}.\n\nUnits\n\n[T] = K\n[p] = Pa\n[ϱ] = mol m⁻³\n[η] = Pa s\n[λ] = W (m K)⁻¹\n[D] = m² s⁻¹\n\n\n\n\n\n","category":"type"},{"location":"models/ES_models/#EntropyScaling.FitOptions","page":"Entropy Scaling Models","title":"EntropyScaling.FitOptions","text":"FitOptions\n\nStruct to control fitting.\n\nFields\n\nwhat_fit::Dict{AbstractTransportProperty,Vector{Bool}}: specify which parameters to fit\n\nExample\n\nFitOptions(;\n    what_fit=Dict(\n        ThermalConductivity()=>ones(Bool,5), \n        SelfDiffusionCoefficient()=>Bool[0,0,0,1,1])\n)\n\n\n\n\n\n","category":"type"},{"location":"getting_started/#Getting-Started-with-EntropyScaling.jl","page":"Getting Started","title":"Getting Started with EntropyScaling.jl","text":"","category":"section"},{"location":"getting_started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The package can be installed by:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Pkg> add EntropyScaling","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Package mode can reached by typing ] in REPL. Then, the module can be loaded by","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using EntropyScaling","category":"page"},{"location":"getting_started/#EOS-Calculations","page":"Getting Started","title":"EOS Calculations","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The calculation of transport properties through entropy scaling is mostly based on  fundamental EOS (defined in the Helmholtz energy a) as they allow the consistent calculation of all required thermodynamic properties, in particular the configurational entropy s_rm conf.  The EOS calculations are not part of this package. However, there is an extension to the Clapeyron.jl package, which provides a large number of different thermodynamic models. The extension is automatically loaded when loading both packages EntropyScaling.jl and Clapeyron.jl. Alternatively, custom thermodynamic models can be used by 'dispatching' the functions defined  in the thermo.jl file to a custom EOS type.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using EntropyScaling, Clapeyron\n\neos_model = PCSAFT(\"n-butane\")\nmodel = FrameworkModel(eos_model,Dict(Viscosity() => [[0.;-14.165;13.97;-2.382;0.501;;]]))\nη = viscosity(model, 37.21e6, 323.)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Using EntropyScaling.jl in combination with Clapeyron.jl is the recommended way.","category":"page"},{"location":"getting_started/#Units","page":"Getting Started","title":"Units","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"EntropyScaling.jl can be used in combination with Unitful.jl. This enables both to obtain unitful properties directly from the models and to use data with associated units for fitting models.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Unitful calculation of transport properties. This adds the methods:\nviscosity(model, p::Pressure, T::Temperature, z=[1.]; phase=:unknown, output=default)\nviscosity(model, ϱ::Density, T::Temperature, z=[1.]; output=default)\nwhere ::Property is meta code for unitful values, e.g. 300u\"K\" for T::Temperature.  The density can either be mass or molar density.  The output keyword defines the unit of the calculated transport property (see here for the default values).\nDefining data for fitting entropy scaling models using units.  This supports constructing TransportPropertyData using units,  e.g. TransportPropertyData(T::Vector{Temperature}, p::Vector{Pressure}, η::Vector{Viscosity}). The property-specific constructors (ViscosityData, ...) also support units.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"In the following, both cases are demonstrated:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using EntropyScaling, Unitful, Clapeyron, CoolProp\n\n# Calculate unitful transport properties\nmodel_CE = RefpropRESModel(\"methane\")\nthermal_conductivity(model, 1u\"atm\", 80u\"°F\")\n# 0.019529950158013242 W K^-1 m^-1\n\n# Assign units to data for fitting\n(_T_exp,_ϱ_exp,_η_exp) = EntropyScaling.load_sample_data();     # Load sample data\nT_exp = _T_exp .* 1u\"K\"\nϱ_exp = _ϱ_exp .* 1u\"mol/m^3\"\nη_exp = _η_exp .* 1u\"Pa*s\"\n\ndata = TransportPropertyData(T_exp, ϱ_exp, η_exp)\n\neos_model = PCSAFT(\"butane\")\nmodel = FrameworkModel(eos_model, [data])                       # Fit model parameters\n\nη = viscosity(model, 1u\"bar\", 26.85u\"°C\", phase=:liquid, output_unit = u\"cP\")\n# 0.16058971694885213 cP","category":"page"},{"location":"getting_started/#Plots","page":"Getting Started","title":"Plots","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Plotting functionality is available through Plots.jl (which must be loaded). For example, this can be used for checking fitted models against scaled (experimental) reference data (see example below).","category":"page"},{"location":"getting_started/#EntropyScaling.plot","page":"Getting Started","title":"EntropyScaling.plot","text":"plot(model::AbstractEntropyScalingModel, dat::TransportPropertyData; slims=nothing, \n     cprop=nothing)\n\nPlots the scaled transport property as function of the entropy scaling variable (e.g. the reduced entropy). The entropy scaling model as well as the scaled transport property data are shown.\n\nslims sets the range for the entropy scaling variable (used for the model calculation). cprop controls the property used for coloring (e.g. :T, :p, or ϱ). A general documentation for plot for controling the appearance can be found here.\n\n\n\n\n\n","category":"function"},{"location":"getting_started/#Example","page":"Getting Started","title":"Example","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"In the following example, entropy scaling models are fitted to quasi-experimental data (from CoolProp) and compared.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using EntropyScaling, Clapeyron, CoolProp, Plots\n\nsub = \"propane\"\nNdat = 200\nT, p = rand(200.:500.,Ndat), 10.0.^(rand(Ndat).*4 .+ 4)     # define T-p state points\nη = [PropsSI(\"V\",\"T\",T[i],\"P\",p[i],sub) for i in 1:Ndat]    # calculate reference viscosity data\n\n# Create data and model\nηdat = ViscosityData(T,p,[],η)\nmodel_A = FrameworkModel(PCSAFT(sub), [ηdat])\nmodel_B = FrameworkModel(PCSAFT(sub), [ηdat]; opts=FitOptions(what_fit=Dict(Viscosity() => Bool[0,1,0,1,0])))\n\n# Test plot \nplot(model, ηdat; slims=(0,3), cprop=:T, label=\"Model A (4 parameters fitted)\")\nplot!(model_B, ηdat; slims=(0,3), cprop=:T, lc=:blue, label=\"Model B (2 parameters fitted)\")","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"(Image: Plot example)","category":"page"},{"location":"transport_properties/#Transport-Properties","page":"Transport Properties","title":"Transport Properties","text":"","category":"section"},{"location":"transport_properties/","page":"Transport Properties","title":"Transport Properties","text":"After constructing a model, transport properties can be calculated (if respective parameters are available). The call for all this is always of the form:","category":"page"},{"location":"transport_properties/","page":"Transport Properties","title":"Transport Properties","text":"transport_property(model, p, T, x=[1.]; phase=:unkwown)","category":"page"},{"location":"transport_properties/","page":"Transport Properties","title":"Transport Properties","text":"where","category":"page"},{"location":"transport_properties/","page":"Transport Properties","title":"Transport Properties","text":"model is a AbstractTransportPropertyModel,\np is the pressure ([p] = Pa),\nT is the temperature ([T] = K),\nx is the mole fraction ([x] = mol mol⁻¹), and\nphase is the desired phase (liquid or gas) used in the volume solver.","category":"page"},{"location":"transport_properties/","page":"Transport Properties","title":"Transport Properties","text":"Internally, the density is always calculated first and then the function EntropyScaling.ϱT_transport_property(model, ϱ, T, x) is called (with [ϱ] = mol m⁻³).","category":"page"},{"location":"transport_properties/#EntropyScaling.viscosity","page":"Transport Properties","title":"EntropyScaling.viscosity","text":"viscosity(model::EntropyScalingModel, p, T, z=[1.]; phase=:unknown)\n\nViscosity η(p,T,x) ([η] = Pa s).\n\n\n\n\n\n","category":"function"},{"location":"transport_properties/#EntropyScaling.thermal_conductivity","page":"Transport Properties","title":"EntropyScaling.thermal_conductivity","text":"thermal_conductivity(model::EntropyScalingModel, p, T, z=[1.]; phase=:unknown)\n\nThermal conductivity λ(p,T,x) ([λ] = W m⁻¹ K⁻¹).\n\n\n\n\n\n","category":"function"},{"location":"transport_properties/#EntropyScaling.self_diffusion_coefficient","page":"Transport Properties","title":"EntropyScaling.self_diffusion_coefficient","text":"self_diffusion_coefficient(model::EntropyScalingModel, p, T, z=[1.]; phase=:unknown)\n\nSelf-diffusion coefficient D(p,T,x) ([D] = m² s⁻¹).\n\n\n\n\n\n","category":"function"},{"location":"transport_properties/#EntropyScaling.MS_diffusion_coefficient","page":"Transport Properties","title":"EntropyScaling.MS_diffusion_coefficient","text":"MS_diffusion_coefficient(model::EntropyScalingModel, p, T, z; phase=:unknown)\n\nMaxwell-Stefan diffusion coefficient Ð(p,T,x) ([Ð] = m² s⁻¹).\n\n\n\n\n\n","category":"function"},{"location":"#EntropyScaling.jl","page":"Home","title":"EntropyScaling.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Transport property modeling based on entropy scaling and equations of state (EOS).","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides methods to model ","category":"page"},{"location":"","page":"Home","title":"Home","text":"the viscosity,\nthe thermal conductivity, and\ndiffusion coefficients","category":"page"},{"location":"","page":"Home","title":"Home","text":"in a physically sound way. For the EOS calculations, additional packages need to be imported. Alternatively, custom EOS functions can be defined. Implementations of EOS models are not included in this package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Entropy scaling makes use of the fact that transport properties can be scaled such that the scaled transport property Y^rm s is a univariate function of the configurational (or  residual) entropy s_rm conf, i.e.  Y^rm s = Y^rm sleft(s_rm confright)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Entropy scaling enables the prediction of transport properties in all fluid phases based on  few experimental data.","category":"page"}]
}
